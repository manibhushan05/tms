import unittestimport randomfrom django.test import TestCasefrom restapi.helper_api import generate_random_uppercase_string, random_with_N_digits, \    generate_random_string_except_given_string, generate_random_string_with_given_string, \    generate_random_lowercase_stringfrom restapi.service.validators import validate_pan, validate_mobile_number, validate_ifsc, validate_gstin, \    validate_name, validate_pin, validate_vehicle_numberclass TestValidPan(unittest.TestCase):    def test_valid_pan_success(self):        self.assertTrue(validate_pan('{}{}{}{}{}'.format(generate_random_uppercase_string(N=3),                                                         generate_random_string_with_given_string(value='abcfghljpte',                                                                                                  N=1),                                                         generate_random_uppercase_string(N=1),                                                         random_with_N_digits(n=4), generate_random_uppercase_string(                N=1))))  # pan validation with valid input        self.assertTrue(validate_pan('{}{}{}{}{}'.format(generate_random_lowercase_string(N=3),                                                         generate_random_string_with_given_string(value='abcfghljpte',                                                                                                  N=1),                                                         generate_random_uppercase_string(N=1), random_with_N_digits(4),                                                         generate_random_lowercase_string(                                                             N=1))))  # pan validation with valid input    def test_valid_pan_failure(self):        self.assertFalse(validate_pan(" {}{}{}{}{}".format(generate_random_uppercase_string(N=3),                                                           generate_random_string_except_given_string(                                                               value='abcfghljpte', N=1),                                                           generate_random_uppercase_string(N=1),                                                           random_with_N_digits(4), generate_random_uppercase_string(                N=1))))  # pan validation with invalid  input (starting with whitespace)        self.assertFalse(validate_pan("{}{}{}{}{} ".format(generate_random_uppercase_string(N=3),                                                           generate_random_string_except_given_string(                                                               value='abcfghljpte', N=1),                                                           generate_random_uppercase_string(N=1),                                                           random_with_N_digits(4), generate_random_uppercase_string(                N=1))))  # pan validation with invalid  input (ending with whitespace)        self.assertFalse(validate_pan("{}{}{}{}".format(generate_random_uppercase_string(N=3),                                                        generate_random_string_with_given_string(value='abcfghljpte',                                                                                                 N=1),                                                        generate_random_uppercase_string(N=1), random_with_N_digits(                5))))  # pan validation with invalid  input (last character in numeric)        self.assertFalse(validate_pan(            "{}{}{}{}{}{}".format(random_with_N_digits(n=1), generate_random_uppercase_string(N=2),                                  generate_random_string_with_given_string(value='abcfghljpte', N=1),                                  generate_random_uppercase_string(N=1), random_with_N_digits(4),                                  generate_random_uppercase_string(                                      N=1))))  # pan validation with invalid  input (first character numeric)        self.assertFalse(validate_pan(            "{}{}{}{}{}{}{}".format(generate_random_uppercase_string(N=1), random_with_N_digits(n=1),                                    generate_random_uppercase_string(N=1),                                    generate_random_string_with_given_string(value='abcfghljpte', N=1),                                    generate_random_uppercase_string(N=1), random_with_N_digits(4),                                    generate_random_uppercase_string(                                        N=1))))  # pan validation with invalid  input (second character numeric)        self.assertFalse(validate_pan(            "{}{}{}{}{}{}".format(generate_random_uppercase_string(N=2), random_with_N_digits(n=1),                                  generate_random_string_with_given_string(value='abcfghljpte', N=1),                                  generate_random_uppercase_string(N=1), random_with_N_digits(4),                                  generate_random_uppercase_string(                                      N=1))))  # pan validation with invalid  input (third character numeric)        self.assertFalse(validate_pan("{}{}{}{}{}".format(generate_random_uppercase_string(N=3),                                                          generate_random_string_except_given_string(                                                              value='abcfghljpte', N=1),                                                          generate_random_uppercase_string(N=1),                                                          random_with_N_digits(4), generate_random_uppercase_string(                N=1))))  # pan validation with invalid  input (fourth character is out of range)        self.assertFalse(validate_pan("{}{}{}{}".format(generate_random_uppercase_string(N=3),                                                        generate_random_string_with_given_string(value='abcfghljpte',                                                                                                 N=1),                                                        random_with_N_digits(5), generate_random_uppercase_string(                N=1))))  # pan validation with invalid  input (fifth character is numeric)        self.assertFalse(validate_pan("{}{}{}{}{}".format(generate_random_uppercase_string(N=3),                                                          generate_random_string_with_given_string(value='abcfghljpte',                                                                                                   N=1),                                                          generate_random_uppercase_string(N=2),                                                          random_with_N_digits(3), generate_random_uppercase_string(                N=1))))  # pan validation with invalid  input (sixth character is alphabet)        self.assertFalse(validate_pan("{}{}{}{}{}{}{}".format(generate_random_uppercase_string(N=3),                                                              generate_random_string_with_given_string(                                                                  value='abcfghljpte', N=1),                                                              generate_random_uppercase_string(N=1),                                                              random_with_N_digits(1),                                                              generate_random_uppercase_string(N=1),                                                              random_with_N_digits(2), generate_random_uppercase_string(                N=1))))  # pan validation with invalid  input (seventh character is alphabet)        self.assertFalse(validate_pan('{}{}{}{}{}P'.format(generate_random_uppercase_string(N=3),                                                           generate_random_string_with_given_string(value='abcfghljpte',                                                                                                    N=1),                                                           generate_random_uppercase_string(N=1),                                                           random_with_N_digits(4), generate_random_uppercase_string(                N=1))))  # pan validation with invalid input (length > 10)        self.assertFalse(validate_pan('A{}{}{}{}{}'.format(generate_random_uppercase_string(N=3),                                                           generate_random_string_with_given_string(value='abcfghljpte',                                                                                                    N=1),                                                           generate_random_uppercase_string(N=1),                                                           random_with_N_digits(4), generate_random_uppercase_string(                N=1))))  # pan validation with invalid input (length > 10)        self.assertFalse(validate_pan(None))  # pan validation with invalid  input (passed value None)        self.assertFalse(validate_pan(""))  # pan validation with invalid  input (passed value "")        self.assertFalse(validate_pan("not"))  # pan validation with invalid  input (passed value "not")class TestValidMobileNumber(unittest.TestCase):    def test_valid_mobile_number_success(self):        self.assertTrue(validate_mobile_number(            '{}{}'.format(random.randint(1, 9), random_with_N_digits(9))))  # valid mobile number        # self.assertTrue(validate_mobile_number(u"{}{}".format(random.randint(1,10), random_with_N_digits(9)))) #valid mobile number    def test_valid_mobile_number_failure(self):        self.assertFalse(validate_mobile_number(' {}{}'.format(random.randint(1, 9), random_with_N_digits(            9))))  # invalid mobile number (starting with whitespace)        self.assertFalse(validate_mobile_number('{}{} '.format(random.randint(1, 9), random_with_N_digits(            9))))  # invalid mobile number (ending with whitespace)        self.assertFalse(validate_mobile_number('{}{}{}'.format(random.randint(1, 9), random_with_N_digits(9),                                                                generate_random_uppercase_string(                                                                    N=1))))  # extra character at the end        self.assertFalse(validate_mobile_number('{}{}'.format(random.randint(1, 9), random_with_N_digits(10))))        self.assertFalse(validate_mobile_number('{}{}'.format(random.randint(1, 9), random_with_N_digits(8))))        self.assertFalse(validate_mobile_number(None))        self.assertFalse(validate_mobile_number(""))        self.assertFalse(validate_mobile_number("transiq tec"))class TestValidIfsc(unittest.TestCase):    def test_valid_ifsc_success(self):        self.assertEqual(            validate_ifsc('{}0{}'.format(generate_random_uppercase_string(4), generate_random_lowercase_string(6))),            True)  # valid ifsc        self.assertEqual(validate_ifsc('{}0{}'.format(generate_random_lowercase_string(4), random_with_N_digits(6))),                         True)  # valid ifsc        self.assertEqual(validate_ifsc(            '{}0{}{}{}{}'.format(generate_random_uppercase_string(4), random_with_N_digits(2),                                 generate_random_lowercase_string(2), random_with_N_digits(1),                                 generate_random_uppercase_string(1))), True)  # valid ifsc    def test_valid_ifsc_failure(self):        self.assertFalse(validate_ifsc(' {}0{}'.format(generate_random_uppercase_string(4),                                                       generate_random_lowercase_string(                                                           6))))  # invalid ifsc (staring with whitespace)        self.assertFalse(validate_ifsc('{}0{} '.format(generate_random_uppercase_string(4),                                                       generate_random_lowercase_string(                                                           6))))  # invalid ifsc (ending with whitespace)        self.assertFalse(validate_ifsc('{}2{} '.format(generate_random_uppercase_string(4),                                                       generate_random_lowercase_string(                                                           6))))  # invalid ifsc (fifth character is other than 0)        self.assertFalse(validate_ifsc('{}{}0{} '.format(random_with_N_digits(1), generate_random_uppercase_string(3),                                                         generate_random_lowercase_string(                                                             6))))  # invalid ifsc (first character is numeric)        self.assertFalse(validate_ifsc('{}{}0{} '.format(random_with_N_digits(1), generate_random_uppercase_string(3),                                                         generate_random_lowercase_string(                                                             6))))  # invalid ifsc (first character is numeric)        self.assertFalse(validate_ifsc('{}{}{}0{} '.format(generate_random_uppercase_string(1), random_with_N_digits(1),                                                           generate_random_uppercase_string(2), random_with_N_digits(                6))))  # invalid ifsc (second character is numeric)        self.assertFalse(validate_ifsc(            '{}{}{}0{}{}'.format(generate_random_uppercase_string(2), random_with_N_digits(1),                                 generate_random_lowercase_string(1), generate_random_uppercase_string(3),                                 random_with_N_digits(3))))  # invlid ifsc (third character is numeric)        self.assertFalse(validate_ifsc(            '{}{}0{}{}{}'.format(generate_random_uppercase_string(3), random_with_N_digits(1),                                 generate_random_lowercase_string(2), generate_random_uppercase_string(2),                                 random_with_N_digits(2))))  # invlid ifsc (fourth character is numeric)        # self.assertFalse(validate_ifsc(None)) #invalid ifsc (passing none)        self.assertFalse(validate_ifsc(""))  # invalid ifsc (passing "")        self.assertFalse(validate_ifsc("transiq tec"))  # invalid ifscclass TestValidGstin(unittest.TestCase):    def test_valid_gstin_success(self):        self.assertEqual(validate_gstin(            '{}{}{}{}{}z{}'.format(random_with_N_digits(2), generate_random_uppercase_string(5),                                   random_with_N_digits(4), generate_random_uppercase_string(1),                                   random_with_N_digits(1), random_with_N_digits(1))), True)  # valid gstin        self.assertEqual(validate_gstin(            '{}{}{}{}{}Z{}'.format(random_with_N_digits(2), generate_random_uppercase_string(5),                                   random_with_N_digits(4), generate_random_uppercase_string(1),                                   random_with_N_digits(1), generate_random_lowercase_string(1))), True)  # valid gstin    def test_valid_gstin_failure(self):        self.assertFalse(validate_gstin(            ' {}{}{}{}{}z{}'.format(random_with_N_digits(2), generate_random_uppercase_string(5),                                    random_with_N_digits(4), generate_random_uppercase_string(1),                                    random_with_N_digits(1), random_with_N_digits(1))),            True)  # invalid gstin (starting with whitespace)        self.assertFalse(validate_gstin(            '{}{}{}{}z{}'.format(generate_random_uppercase_string(5), random_with_N_digits(4),                                 generate_random_uppercase_string(1), random_with_N_digits(1),                                 random_with_N_digits(1))), True)  # invalid gstin (missing first two characters)        self.assertFalse(validate_gstin(            '{}{}{}{}{}z{} '.format(random_with_N_digits(2), generate_random_uppercase_string(5),                                    random_with_N_digits(4), generate_random_uppercase_string(1),                                    random_with_N_digits(1), random_with_N_digits(1))),            True)  # invalid gs tin (starting with whitespace)        self.assertFalse(validate_gstin(            '{}{}{}{}{}z'.format(random_with_N_digits(2), generate_random_uppercase_string(5), random_with_N_digits(4),                                 generate_random_uppercase_string(1), random_with_N_digits(1))),            True)  # invalid gstin (missing last character)        self.assertFalse(validate_gstin(            '{}{}{}{}{}{}{}'.format(random_with_N_digits(2), generate_random_uppercase_string(5),                                    random_with_N_digits(4), generate_random_uppercase_string(1),                                    random_with_N_digits(1), generate_random_string_except_given_string(value='z', N=1),                                    generate_random_lowercase_string(1))),            True)  # invalid gstin (14th character is other than z)        self.assertFalse(validate_gstin(            '{}{}{}{}{}{}z{}'.format(generate_random_lowercase_string(1), random_with_N_digits(1),                                     generate_random_uppercase_string(5), random_with_N_digits(4),                                     generate_random_uppercase_string(1), random_with_N_digits(1),                                     random_with_N_digits(1))), True)  # valid gstin (1st character is alphabet)        self.assertFalse(validate_gstin(            '{}{}{}{}{}{}z{}'.format(random_with_N_digits(1), generate_random_uppercase_string(1),                                     generate_random_uppercase_string(5), random_with_N_digits(4),                                     generate_random_uppercase_string(1), random_with_N_digits(1),                                     random_with_N_digits(1))), True)  # invalid gstin (2nd character is alphabet)        self.assertFalse(validate_ifsc(            '{}{}{}{}{}{}{}z{}'.format(random_with_N_digits(2), generate_random_uppercase_string(2),                                       random_with_N_digits(1), generate_random_uppercase_string(2),                                       random_with_N_digits(4), generate_random_uppercase_string(1),                                       random_with_N_digits(1),                                       random_with_N_digits(1))))  # invlaid gstin (6th character is numeric)        self.assertFalse(validate_ifsc(            '{}{}{}{}{}Z{}'.format(random_with_N_digits(2), generate_random_uppercase_string(6),                                   random_with_N_digits(3), generate_random_lowercase_string(1),                                   random_with_N_digits(1),                                   generate_random_lowercase_string(1))))  # invalid gstin (8th character is alphabet)        self.assertFalse(validate_ifsc(            '{}{}{}{}{}Z{}'.format(random_with_N_digits(2), generate_random_lowercase_string(5),                                   random_with_N_digits(3), generate_random_uppercase_string(2),                                   random_with_N_digits(1),                                   random_with_N_digits(1))))  # invalid gstin (11th character is alphabet)        self.assertFalse(validate_ifsc(None))  # invalid gstin (passing None)        self.assertFalse(validate_ifsc(""))  # invalid gstin (passing "")        self.assertFalse(validate_ifsc("transiq tec"))  # invalid gstinclass TestValidName(unittest.TestCase):    def test_valid_name_success(self):        self.assertTrue(validate_name('mani bhushan kumar'))        self.assertTrue(validate_name('mani bhushan289'))        self.assertTrue(validate_name('mani bhushan cg04yt9898'))        self.assertTrue(validate_name('Dr. M.B. Mishra'))class TestValidPinCode(unittest.TestCase):    def test_valid_pin_code_success(self):        self.assertTrue(validate_pin('843119'))        self.assertTrue(validate_pin(843119))    def test_valid_pin_code_failure(self):        self.assertFalse(validate_pin('043119'))class TestValidVehicleNumber(unittest.TestCase):    def test_valid_vehicle_number_success(self):        self.assertEqual(validate_vehicle_number("BR-01AQ8864"), True)        self.assertEqual(validate_vehicle_number("cg 11 BB 1774"), True)        self.assertEqual(validate_vehicle_number("GJ.5.cl.2213"), True)        self.assertEqual(validate_vehicle_number("KA 19P 8488"), True)        self.assertEqual(validate_vehicle_number("MP 23 LA 0682"), True)        self.assertEqual(validate_vehicle_number("MH-32-C-1289"), True)        self.assertEqual(validate_vehicle_number("PB03AD4587"), True)        self.assertEqual(validate_vehicle_number("TN-07.aP-3627"), True)        self.assertEqual(validate_vehicle_number("WB-02S 8596"), True)        self.assertEqual(validate_vehicle_number("CH-03-9359"), True)    def test_valid_vehicle_number_failure(self):        self.assertFalse(validate_vehicle_number(" KA 19P 8488"))        self.assertFalse(validate_vehicle_number("KA 19P 8488 "))        self.assertFalse(validate_vehicle_number("KA@19P#8488"))        self.assertFalse(validate_vehicle_number("A 19P 8488"))        self.assertFalse(validate_vehicle_number("1A 19P 8488"))        self.assertFalse(validate_vehicle_number("K2 19P 8488"))        self.assertFalse(validate_vehicle_number("KA P 8488"))        self.assertFalse(validate_vehicle_number("KA C9P 8488"))        self.assertFalse(validate_vehicle_number("KA BCP 8488"))        self.assertFalse(validate_vehicle_number("KA 19P 848"))        self.assertFalse(validate_vehicle_number("KA 19 P 84"))        self.assertFalse(validate_vehicle_number("KA 19P 84AB"))        self.assertFalse(validate_vehicle_number("KA 19P 848D"))        self.assertFalse(validate_vehicle_number("KA 19P ABCD"))